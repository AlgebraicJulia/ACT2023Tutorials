---
title: Solutions to Exercises
---

```{julia}
using Pkg

Pkg.activate(".")
```

## Part 1

:::{.rmenv title="Exercise (Installation)"}
Follow the [quick start](quickstart) instructions to install Julia, a code editor, and the git version control system.
:::

:::{.solenv}
If you're stuck on setup, please ask an instructor or TA for help!
:::

:::{.rmenv title="Exercise (Hello World)"}
Get Julia to print "Hello World".
:::

:::{.solenv}
Output text with the `println` function.

```{julia}
println("Hello World!")
```

String concatentation in Julia uses the `*` symbol.

```{julia}
println("Hello" * " " * "World!")
```

Print everything in a vector by using broadcasting. To broadcast, append `.` to your function, and pass it something you can iterate over (like a vector). Or, use `map` or `foreach`.

```{julia}
# Both of these return a vector of `nothing`s:

# println.(["Hello", "World!"])
# map(println, ["Hello", "World!"])

# This one produces side effects only:
foreach(println, ["Hello", "World!"])
```

Perform string interpolation using `$`.

```{julia}
favorite_library = "AlgebraicDynamics.jl"

println("My favorite AlgebraicJulia package is $(favorite_library)!")
```
:::

:::{.rmenv title="Exercise (Package management)"}
Install a Julia package, such as `Catlab` or `AlgebraicDynamics`, using the [Julia package manager](https://docs.julialang.org/en/v1/stdlib/Pkg/).
:::

:::{.solenv}
From a Julia REPL, enter the package manager by typing `]`. Create a new project, which will organize the packages you're using for this workshop, by typing
`pkg> activate .`
Next, add Catlab to your project by typing
`pkg> add Catlab`
You should see a bunch of stuff happening, including precompilation of the Catlab code.

When that's finished, hit backspace to get out of the package manager and type
```julia
using Catlab
```
to load Catlab into your REPL session. To make sure it worked right, try something like
```julia
g = path_graph(Graph, 7)
```
to produce your first graph in Catlab!
:::


:::{.rmenv title="Exercise (Sharing is caring)"}
Fork and clone the [ACT2023Tutorial](https://github.com/AlgebraicJulia/ACT2023Tutorial) repository, make a change, commit it, and create a pull request.
:::

:::{.solenv}
1. Log into [github.com](https://github.com)
2. Navigate to [github.com/AlgebraicJulia/ACT2023Tutorials](https://github.com/AlgebraicJulia/ACT2023Tutorials)
3. By the top right of the page there click the "Fork" button to the left of the "Star" button.
4. On the next page click "Create fork", this will create a copy of the repository on your own GitHub account
5. Clone your fork (replacing `<user_name>` with your own GitHub username)
   ```sh
   git clone https://github.com/<user_name>/ACT2023Tutorials.git
   ```
6. Navigate into the solutions folder and create a new directory with your name (replacing `<your_name>` with your own name)
   ```sh
   cd ACT2023Tutorials/solutions
   mkdir <your_name>
   ```
7. Put some code in there!
   ```sh
   echo "print('Hello, World!')" > hello_world.jl
   ```
8. Stage, commit, and push your changes
   ```sh
   git add hello_world.jl
   git commit -m "Adding solutions for <your_name>"
   git push
   ```
9. Navigate to your fork on GitHub (replacing `<user_name>` with your GitHub username): `https://github.com/<user_name>/ACT2023Tutorials`
10. Click the "Pull requests" tab across the top of the page and click the "New pull request". This will automatically create a new pull request on the original repository from your fork
11. Click "Create pull request"
12. Put a short title and description and click "Create pull request"
:::

:::{.rmenv title="Exercise (Finite sets)"}
Write a function that computes the product of two finite sets, along with the projection maps out.
:::

:::{.solenv}
For convenience, we'll use the types `FinSet` and `FinFunction` exported by Catlab, which are similar to but more general than those in the problem statement.

```{julia}
#| output: false
using Catlab

function product_projections(A::FinSet{Int}, B::FinSet{Int})
  m, n = length(A), length(B)
  AB = FinSet(m*n)
  
  # In this calculation, `÷` (short for `div` function) is truncating integer
  # division and `%` (short for `mod` function) is the modulus.
  # Notice that we're using the skeleton of FinSet with sets `1:n` but the
  # calculation below is most natural for sets `0:(n-1)`.
  πA = FinFunction(i -> (i-1) ÷ n + 1, AB, A)
  πB = FinFunction(i -> (i-1) % n + 1, AB, B)
  
  (πA, πB)
end
```

An example:

```{julia}
using Test

π₁, π₂ = product_projections(FinSet(3), FinSet(4))
@test dom(π₁) == dom(π₂) == FinSet(12)
@test collect(π₁) == [1,1,1,1, 2,2,2,2, 3,3,3,3]
@test collect(π₂) == [1,2,3,4, 1,2,3,4, 1,2,3,4]
```
:::

:::{.rmenv title="Exercise (Graphs)"}
Implement a graph data structure in Catlab either (a) using Catlab's support for C-sets (`@acset_type`) or (b) more directly, using finite sets (`FinSet`) and functions (`FinFunction`).
:::

:::{.solenv}

a. Graphs as C-sets:

   ```{julia}
   using Catlab

   @present SchGph(FreeSchema) begin
      V::Ob
      E::Ob
      src::Hom(E,V)
      tgt::Hom(E,V)
   end

   # Index the `src` and `tgt` functions for fast lookups of inverse images
   # using the `incident` function.
   @acset_type Gph(SchGph, index=[:src,:tgt])

   # An example graph
   g = @acset Gph begin
     V = 3
     E = 2
     src = [1,1]
     tgt = [2,1]
   end
   ```
   
   We use the name `Gph` to avoid a name conflict with Catlab's exported type
   `Graph`, but `Graph` is defined in Catlab in exactly the same way!
   
   The exported `Graph` type includes support for visualization using
   [Graphviz](https://graphviz.org/), which we can use to see what the above
   graph looks like:
   
   ```{julia}
   g = @acset Graph begin
     V = 3
     E = 2
     src = [1,1]
     tgt = [2,1]
   end
   
   to_graphviz(g, node_labels=true)
   ```
   
b. Using finite sets and functions:

   ```{julia}
   #| output: false
   # Catlab exports these generic functions. We import them explicitly so that
   # we can add new methods to them.
   import Catlab: src, tgt, vertices, edges
   
   struct MyGraph
     # We don't need fields for `E` and `V` since these are the domain and
     # codomain of `src` and `tgt`.
     src::FinFunction
     tgt::FinFunction

     function MyGraph(src::FinFunction, tgt::FinFunction)
       dom(src) == dom(tgt) || error("Source and target must have same domain")
       codom(src) == codom(tgt) || error("Source and target must have same codomain")
       new(src, tgt)
     end
   end

   # A few accessor functions. Our users shouldn't need to know the internal
   # layout of the fields in the struct!
   src(g::MyGraph) = g.src
   tgt(g::MyGraph) = g.tgt
   vertices(g::MyGraph) = codom(src(g)) # == codom(tgt(g))
   edges(g::MyGraph) = dom(src(g)) # == dom(tgt(g))
   ```
   
   Now let's test that it works!

   ```{julia}
   using Test

   s, t = FinFunction([1,1], 3), FinFunction([2,1], 3)
   g = MyGraph(s, t)
   
   @test vertices(g) == FinSet(3)
   @test edges(g) == FinSet(2)
   ```

:::

:::{.rmenv title="Exercise (Optimizing Euler)"}
Write an optimized implementation of Euler's method that computes the derivative in place and only makes allocations when initializing the algorithm.
:::

:::{.solenv}
For the sake of comparison, let's first measure the allocations of the naive implementation of Euler's method.

```{julia}
function euler(du::Function, init::Vector{Float64}, dt::Float64, m::Int)
  n = length(init)
  x = zeros(Float64, (m+1, n))
  x[1,:] = init
  for i in 1:m
    x[i+1,:] = x[i,:] + dt * du(x[i,:])
  end
  x
end

du(u) = [u[3], u[4], 0, -9.8]
@time trajectory = euler(du, [0, 0, 5.0, 10.0], 0.1, 1000);
```

In the optimized version, we pass a function `du!` that computes the derivative in-place.

```{julia}
function inplace_euler(du!::Function, init::Vector{Float64}, dt::Float64, m::Int)
  n = length(init)
  x = zeros(Float64, (m+1, n))
  du = zeros(Float64, n)
  x[1,:] = init
  for i in 1:m
    du!(du, j -> x[i,j])
    for j in 1:n
      x[i+1,j] = x[i,j] + dt * du[j]
    end
  end
  x
end

@inline function du!(du, u)
  du[1] = u(3)
  du[2] = u(4)
  du[3] = 0
  du[4] = -9.8
end
@time trajectory′ = inplace_euler(du!, [0, 0, 5.0, 10.0], 0.1, 1000);
```

Notice that the number of allocations is constant in the length of the trajectory. We better also check that we get the same answer as before.

```{julia}
@test trajectory′ ≈ trajectory
```

:::

# Part 2

:::{.rmenv title="Exercise (Growing rabbits)"}
Implement the dynamical system

$$ \dot{R} = \alpha R $$

using `AlgebraicDynamics`.
:::

:::{.solenv}
Define the dynamical system as a resource sharer:

```{julia}
using AlgebraicDynamics

ṙ(r,p,t) = p.α * r
rabbit_growth = ContinuousResourceSharer{Float64}(1, ṙ)
```

Simulate and plot:

```{julia}
using LabelledArrays
using DifferentialEquations, Plots

u0 = [1.0]
params = LVector(α=0.3)
tspan = (0.0, 10.0)

prob = ODEProblem(rabbit_growth, u0, tspan, params)
sol = solve(prob, Tsit5())

plot(sol, title="Exponential growth of rabbit population",
     legend=false, xlabel="time", ylabel="population size")
```
:::

:::{.rmenv title="Exercise (UWDs as data structure)"}
a. Write a call to the `@relation` macro that constructs the shown UWD.
b. Construct the UWD manually using the API for UWDs or the lower-level API for acsets.
:::

:::{.solenv}
Using the `@relation` macro:

```{julia}
uwd = @relation (x,y,z) where (w,x,y,z) begin
  R(x,w)
  S(y,w)
  T(z,w)
end

to_graphviz(uwd, box_labels=:name, junction_labels=:variable)
```

Using the UWD API:

```{julia}
d = RelationDiagram(3) # Create diagram with 3 outer ports
add_junctions!(d, 4, variable=[:w,:x,:y,:z]) # Add four junctions
set_junction!(d, 1:3, 2:4, outer=true) # Set junctions of outer ports

for name in [:R, :S, :T]
  add_box!(d, 2, name=name) # Add box with two ports
end
for (i, box) in enumerate(boxes(d))
  set_junction!(d, (box, 1), i+1)
  set_junction!(d, (box, 2), 1)
end

@test d == uwd
```

The advantange of using the programmatic API is that this code is easily generalized to a function that creates a "star-shaped UWD" of any size. You might try implementing this function as a further exercise.
:::

:::{.rmenv title="Exercise (Pendulum)"}
Implement a dynamical system modeling the trajectory of a pendulum.
:::

:::{.solenv}
We'll use the differential equation for the motion of a [simple pendulum](https://en.wikipedia.org/wiki/Pendulum_(mechanics))

$$ \frac{d^2 \theta}{dt^2} + \frac{g}{\ell} \sin\theta = 0, $$

where $g$ is the acceleration due to gravity and $\ell$ is the length of the rod. It's fun that since we're working numerically, we don't need to bother with the small-angle approximation $\sin(\theta) \approx \theta$ that you probably remember from physics class.

We turn this second-order ODE into a first-order system of ODEs by introducing a new variable, the angular velocity $\omega$:

\begin{align*}
  \dot\theta &= \omega \\
  \dot\omega &= -\frac{g}{\ell} \sin\theta
\end{align*}

Now we can plug this into AlgebraicDynamics:

```{julia}
du(u,p,t) = [u[2], -p.g/p.ℓ * sin(u[1])]

pendulum = ContinuousResourceSharer{Float64}(2, du)

u0 = [π/4, 0]
params = LVector(g=9.8, ℓ=1)
tspan = (0.0, 10.0)

prob = ODEProblem(pendulum, u0, tspan, params)
sol = solve(prob, Tsit5())
plot(sol, title="Simple pendulum", xlabel="time", label=["θ" "ω"])
```
:::

:::{.rmenv title="Exercise (Graph traversal)"}
Implement a graph traversal algorithm, such as depth-first search or
breadth-first search, using the acsets API (`subpart`, `incident`).
:::

:::{.solenv}
A stack-based depth-first search algorithm:

```{julia}
#| output: false
using Catlab
using DataStructures: Stack

""" Depth-first search in graph `g` starting at vertex `v`

The function `f` is called at every vertex in the search path.
"""
function dfs(f::Function, g::ACSet, v::Int)
  seen = Set{Int}()
  next = Stack{Int}()
  push!(next, v)
  while !isempty(next)
    v = pop!(next)
    v ∈ seen && continue
    f(v)
    push!(seen, v)
    # Add all outgoing edges to the stack.
    for e in incident(g, v, :src)
      # Syntactic sugar: `g[e, :tgt] == subpart(g, e, :tgt)``
      push!(next, g[e, :tgt])
    end
  end
end
```

Traversal of a directed cycle, starting at the third vertex, yields the vertices
in the expected order.

```{julia}
g = cycle_graph(Graph, 6)
dfs(println, g, 3)
```
:::

:::{.rmenv title="Exercise (Union-find)"}
Use the union-find data structure to find the connected components of a graph, by making `src(e)` and `tgt(e)` be in the same equivalence class for each edge `e`.
:::

:::{.solenv}
```{julia}
#| output: false
using Catlab
using DataStructures: IntDisjointSets, union!, find_root

""" Find connected components of a graph.

Returns a dictionary from the component roots to lists of vertices in each
component.
"""
function connected_components(g::HasGraph)
  sets = IntDisjointSets(nparts(g, :V))
  for e in parts(g, :E)
    union!(sets, g[e,:src], g[e,:tgt])
  end

  components = Dict{Int,Vector{Int}}()
  for v in parts(g, :V)
    component = get!(() -> Int[], components, find_root(sets, v))
    push!(component, v)
  end
  components
end
```

A graph with three components constructed as a coproduct of basic graphs:

```{julia}
g = path_graph(Graph, 3) ⊕ cycle_graph(Graph, 4) ⊕ star_graph(Graph, 4)

values(connected_components(g))
```
:::

:::{.rmenv title="Exercise (Julia macros)"}
Write a macro that creates a graph using a Graphviz-like syntax.
:::

:::{.solenv}
In Catlab, we typically use the pattern-matching features of [MLStyle.jl](https://github.com/thautwarm/MLStyle.jl) to simplify the parsing of Julia expressions. For the sake of illustration, we deconstruct the expressions "by hand" below.

```{julia}
#| output: false
macro make_graph(expr)
  make_graph(expr)
end

function make_graph(block::Expr)
  g = Graph()
  vnames = Dict{Symbol,Int}()
  block.head == :block || error("Input to `make_graph` must be a block")
  for arg in block.args
    if arg isa LineNumberNode
      continue
    elseif arg isa Symbol
      haskey(vnames, arg) && error("Vertex $arg already defined")
      vnames[arg] = add_vertex!(g)
    elseif arg isa Expr && arg.head == :(->)
      sname, rhs = arg.args
      tname = rhs.args[2]
      add_edge!(g, vnames[sname], vnames[tname])
    else
      error("Cannot parse statement $arg")
    end
  end
  g
end
```

Let's try it out on the given example:

```{julia}
g = @make_graph begin
  a
  b
  c
  a -> b
  b -> c
end

to_graphviz(g)
```

For comparison, Catlab ships with a similar macro `@graph` and a host of related but more complicated macros for building categories, diagrams in a category, and so on.
:::

## Part 3


:::{.rmenv title="Exercise (Your first DDS)"}
:::

:::{.solenv}

We can the schema for a discrete dynamical system as a schema category with a single object, $X$, and a single morphism ϕ from $X$ to $X$:

```{julia}
using Catlab
@present SchDDS(FreeSchema) begin
  X::Ob
  ϕ::Hom(X,X)
end

@acset_type DDS(SchDDS)
```
:::

:::{.solenv}

Instantiate can be done by calling DDS as an empty constructor. We can then mutate this object to provide values for $X$ and ϕ.

```{julia}
using Catlab

myDDS = DDS()
add_parts!(myDDS, :X, 5, ϕ=[3,3,4,1,2])
myDDS
```

:::{.solenv}

We could alternatively make use of the `@acset` macro. This lets us specify an instance declaratively.

```{julia}
using Catlab

myDDS = @acset DDS begin
  X = 5
  ϕ = [3,3,4,1,2]
end
myDDS
```
:::

:::{.rmenv title="Exercise (Double nested undirected wiring diagram, &starf; &starf; &starf;)"}
Suppose that you have a *doubly nested* undirected wiring diagram of resource sharers. By this, I mean you have an undirected wiring diagram, where each box contains an undirected wiring diagram, and each box of this contains a resource sharer.

Then you can put together these resource sharers in two different ways. The first is by composing each of the inner undirected wiring diagrams, so that the outer wiring diagram now has a resource sharer in each box, and then composing the outer undirected wiring diagram. In other words, call `oapply` on each inner wiring diagram, and then call `oapply` on the other diagram.

The second way is to first collapse the nesting, by composing the two layers of wiring diagrams into one big wiring diagram, and then compose all of the resource sharers at one. In other words, call `ocompose` on the UWD of UWDs, and then call `oapply` on the remaining UWD with a resource sharer in each box.

Both methods of composition should ultimately result in the same composed resource sharer.

This is analogous to the law for a monad algebra:

<!-- https://q.uiver.app/#q=WzAsNCxbMCwwLCJUXjJBIl0sWzEsMCwiVCBBIl0sWzAsMSwiVCBBIl0sWzEsMSwiQSJdLFswLDEsIlxcbXVfQSJdLFsxLDMsImYiXSxbMiwzLCJmIiwyXSxbMCwyLCJUIGYiLDJdXQ== -->
<iframe class="quiver-embed" src="https://q.uiver.app/#q=WzAsNCxbMCwwLCJUXjJBIl0sWzEsMCwiVCBBIl0sWzAsMSwiVCBBIl0sWzEsMSwiQSJdLFswLDEsIlxcbXVfQSJdLFsxLDMsImYiXSxbMiwzLCJmIiwyXSxbMCwyLCJUIGYiLDJdXQ==&embed" width="304" height="304" style="border-radius: 8px; border: none;"></iframe>

Verify this rule by testing it out in code; construct a nested undirected wiring diagram, and then try out both ways of composing it.
:::

:::{.solenv}
[This part](https://github.com/AlgebraicJulia/AlgebraicDynamics.jl/blob/43989a4035b315b61676034a63c4ad5d5b4086bf/test/uwd_dynam.jl#L158) of the AlgebraicDynamics code tests this out (more or less), with the caveat that they simplify things by only putting a sub-UWD in one box of the overall UWD, and then use a method of "ocompose" that just collapses a single nested box at a time, in accordance with the treatment of operads in which you compose two operations at a time, rather than $n+1$.
:::

:::{.rmenv title="Exercise (Petri nets as dynamical systems, &starf; &starf; &starf; &starf;)"}
Any Petri net induces a dynamical system where the state space is $\mathbb{R}^S$ ($S$ is the set of species), and the vector field is given by [mass action semantics](https://arxiv.org/pdf/1209.3632.pdf) (see Chapter 2: The rate equation). In [AlgebraicPetri](https://github.com/AlgebraicJulia/AlgebraicPetri.jl), we have a function called [`vectorfield`](https://github.com/AlgebraicJulia/AlgebraicPetri.jl/blob/37247dd15bb1130275ff3b074aa2e19e1cdd38ee/src/AlgebraicPetri.jl#L283) which produces a function that computes the vector field for the mass action equations. Use this function (or for an extra challenge, reimplement this function) to turn an arbitrary Petri net into a resource sharer that exposes all of the populations of the species. Then pick a Petri net, turn it into a resource sharer, and compose it with another resource sharer of your choice.

Now think about the following question. You can compose Petri nets together by gluing their species together. If you compose Petri nets and then take the dynamical system given by mass action on the composed Petri net, is that the same dynamical system as turning each Petri net into a resource sharer and then composing the resource sharers? Prove or give a counterexample.
:::

:::{.solenv}
```{julia}
using AlgebraicPetri, AlgebraicDynamics.UWDDynam

function ContinuousResourceSharer{T}(pn::AbstractPetriNet) where {T}
  vf! = vectorfield(pn)
  vf(u, p, t) = vf!(zero(u), u, p, t)
  ContinuousResourceSharer{T}(ns(pn), vf)
end

sir_petri = PetriNet(LabelledPetriNet([:S,:I,:R], :inf=>((:S,:I)=>(:I,:I)), :rec=>(:I=>:R)))

sir_sharer = ContinuousResourceSharer{Float64}(sir_petri)

birth = ContinuousResourceSharer{Float64}(1, (u, p, t) -> sqrt(u[1]))

uwd = @relation (s,i,r) where (s,i,r) begin
  SIR(s,i,r)
  Birth(s)
end

sys = oapply(uwd, [sir_sharer, birth])

u0 = [1.0, 0.1, 0]
params = [0.5, 0.2]
tspan = (0.0, 10.0)

prob = ODEProblem(sys, u0, tspan, params)
sol = solve(prob, Tsit5())
plot(sol, title="SIR with square root growth", xlabel="time", label=["s" "i" "r"])
```
:::

:::{.rmenv title="Exercise (Nested acsets, &starf; &starf; &starf; &starf; &starf;)"}
Figure out a good mathematical abstraction for, and implement nested acsets in Julia.

For some thoughts on what this might mean, see:

- [Source code for Semagrams](https://github.com/AlgebraicJulia/Semagrams.jl/blob/main/scala/core/src/acsets/acsets.scala)
- [Some thoughts on nested wiring diagrams](https://www.localcharts.org/t/nested-wiring-diagrams-via-bicomodules/792)
- [My talk on Semagrams](https://owenlynch.org/static/2023-ACT-Semagrams/talk.html#/nested-wiring-diagrams-via-free-monads)
:::

:::{.solenv}
If I knew, I'd tell you.
:::
