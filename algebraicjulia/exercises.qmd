---
title: Exercises
---

The purpose of these exercises is to guide your efforts in learning AlgebraicJulia. Thus, some of these exercises are purposely underspecified; the specifics of the answer are not as important as the process of getting to that answer.

For instance, in the first couple exercises, we ask you to install Julia and do some basic tasks. These are exercises in computer systems administrations, not mathematics! Hopefully, everything goes smoothly with installation, but if not, also think of this as an exercise in how to debug computer systems, and don't hesitate to ask for help.

Later exercises include some questions about how to design software; these too have very open-ended answers. Writing software is somewhat like doing mathematical research, in that as much or more time is spent thinking about *what* to prove as is spent actually proving it. In the context of software, this means that more of your time is spent designing the architecture of programs than in implementing algorithms whose specifications are known in advance. In computational category theory, this is especially true. So hopefully these exercises will get you started thinking about these questions, and perhaps you will come up with ideas and approaches that will be new to us!

We expect that you have some familiarity with *some* programming language (not necessarily Julia). But more importantly, we expect that you will use every resource at your disposal to work through these exercises:

- [Julia language documentation.](https://docs.julialang.org/en/v1/) The Manual tab contains much more than all the general information on Julia you should find useful today. 
- AlgebraicJulia documentation ([Catlab.jl](https://algebraicjulia.github.io/Catlab.jl/dev/), [AlgebraicDynamics.jl](https://algebraicjulia.github.io/AlgebraicDynamics.jl/dev/))
- Any other documentation for Julia packages, which often can be found as a link on their GitHub pages.
- The code itself for [Catlab.jl](https://github.com/AlgebraicJulia/Catlab.jl) or any other Julia package. Reading code is a good habit to get into, kind of how like watching TV shows in a foreign language is a good way to pick up familiarity and idioms.
- the instructors and TAs
- your fellow learners
- your random friend you met a year ago who said they liked Julia
- literally anyone else
- [Kittenlab.jl](https://algebraicjulia.github.io/Kittenlab.jl), which is a series of lecture notes for non-category theorists teaching the basics of category theory through the lens of Julia.

The exercises are rated in difficulty from &starf; (easiest) to &starf; &starf; &starf; &starf; &starf; (open problem). Programming is always a time-consuming activity, so don't be discouraged if even the easier exercises take a while to complete.

## Part 1

This first part will be focused on getting familiar with Julia, and the AlgebraicJulia philosophy of doing category theory on the computer.

:::{.rmenv title="Exercise (Installation, &starf;)"}
Follow the [quick start](quickstart) instructions to install Julia, a code editor, and the git version control system.
:::

:::{.rmenv title="Exercise (Hello World, &starf;)"}
Get Julia to print "Hello World".
:::

:::{.rmenv title="Exercise (Package management, &starf;)"}
Install a Julia package, such as `Catlab` or `AlgebraicDynamics`, using the [Julia package manager](https://docs.julialang.org/en/v1/stdlib/Pkg/).
:::

:::{.rmenv title="Exercise (Sharing is caring, &starf; &starf;)"}
In my opinion, one of the biggest barriers to entry to software development for academics is how unintuitive version control is. If you aren't familiar with git, find someone who is and walk through

- Forking the [ACT2023Tutorial](https://github.com/AlgebraicJulia/ACT2023Tutorial) repository
- Clone your fork
- Make a directory called `solutions/$YOUR_NAME` (replace `$YOUR_NAME` with a space-free sequence of characters that you feel describes yourself). Put some code in there!
- *stage* your changes
- *commit* your changes
- *push* your changes to your fork
- *send a pull request* to [ACT2023Tutorial](https://github.com/AlgebraicJulia/ACT2023Tutorial)

This may seem intimidating; that's why you need to find a friend!
:::

:::{.rmenv title="Exercise (Finite sets, &starf; &starf;)"}
We can represent the objects and morphisms in the skeleton of the category $\mathsf{FinSet}$ using the Julia [structs](https://docs.julialang.org/en/v1/manual/types/#Composite-Types):

```julia
struct FinSet
  n::Int
end

struct FinFunction
  dom::FinSet
  codom::FinSet
  values::Vector{Int}
end

A, B = FinSet(3), FinSet(2)
f = FinFunction([1,2,2], A, B)
```
Here, we simply identify the finite set $\{1,2,\ldots,n\}$ with
its number of elements since set operations then operate at the 
speed of Julia integers.

Write a function that computes the product of two finite sets, along with the projection maps out.
:::

:::{.rmenv title="Exercise (Graphs, &starf; &starf;)"}
A **graph** is a set-valued functor on the free category generated by the 

```tikzcd
E \ar[r, bend left, "\mathrm{src}"] \ar[r, bend right, swap, "\mathrm{tgt}"] & V
```

Implement a graph data structure in Catlab either (a) using Catlab's support for C-sets (`@acset_type`) or (b) more directly, using finite sets (`FinSet`) and functions (`FinFunction`). (Tip: Don't call your
data structure `Graph`.)
:::

:::{.rmenv title="Exercise (Optimizing Euler, &starf; &starf; &starf;)"}
In the presentation, we saw an implementation of Euler's method for numerically integrating a differential equation. This implementation is inefficient because it allocates a new vector every time we compute the derivative of the system.

Write an optimized implementation of Euler's method that computes the derivative in place and only makes allocations when initializing the algorithm.

*Hint*: you can use `@time f(x,y,z)` in the REPL to check how many allocations a function `f` makes while running.
:::

## Part 2

:::{.rmenv title="Exercise (Growing rabbits, &starf;)"}
Implement the dynamical system

$$ \dot{R} = \alpha R $$

using `AlgebraicDynamics`.
:::

:::{.rmenv title="Exercise (UWDs as data structure, &starf; )"}
The `@relation` macro in Catlab is a convenient DSL for defining UWDs, but that's all it is: the real data is stored in the acset that the macro produces. This exercise is about understanding the connection between the DSL and the data of the UWD.

a. Write a call to the `@relation` macro that constructs the following UWD.
  ```
  ┌─────┬──────┐
  │ Box │ name │
  ├─────┼──────┤
  │   1 │    R │
  │   2 │    S │
  │   3 │    T │
  └─────┴──────┘
  ┌──────┬─────┬──────────┐
  │ Port │ box │ junction │
  ├──────┼─────┼──────────┤
  │    1 │   1 │        2 │
  │    2 │   1 │        1 │
  │    3 │   2 │        3 │
  │    4 │   2 │        1 │
  │    5 │   3 │        4 │
  │    6 │   3 │        1 │
  └──────┴─────┴──────────┘
  ┌───────────┬────────────────┐
  │ OuterPort │ outer_junction │
  ├───────────┼────────────────┤
  │         1 │              2 │
  │         2 │              3 │
  │         3 │              4 │
  └───────────┴────────────────┘
  ┌──────────┬──────────┐
  │ Junction │ variable │
  ├──────────┼──────────┤
  │        1 │        w │
  │        2 │        x │
  │        3 │        y │
  │        4 │        z │
  └──────────┴──────────┘
  ```
b. Construct the above UWD manually using the API for UWDs (`add_box!`, `set_junction!`) or the lower-level API for acsets (`add_part(s)!`, `set_part(s)!`). It might be helpful to know that the Julia type of the UWD return by the `@relation` macro is `RelationDiagram`.
:::

:::{.rmenv title="Exercise (Pendulum, &starf; &starf;)"}
Implement a dynamical system modeling the trajectory of a pendulum.

This exercise has two parts; first you must come up with an ordinary differential equation that models a pendulum; here you need a bit of physics. Then you must write down this system in AlgebraicDynamics.
:::

:::{.rmenv title="Exercise (Graph traversal, &starf; &starf;)"}
Using a graph data structure created in the Part 1 exercise or the one already available in `Catlab.Graphs`, implement a graph traversal algorithm, such as [depth-first search](https://en.wikipedia.org/wiki/Depth-first_search) or [breadth-first search](https://en.wikipedia.org/wiki/Breadth-first_search), using the acsets API (`subpart`, `incident`).
:::

:::{.rmenv title="Exercise (Union-find, &starf; &starf;)"}
[Union-find](https://en.wikipedia.org/wiki/Disjoint-set_data_structure) data structures are used to represent equivalence relations on finite sets in computer science. In Julia, there is an implementation of union-find called `IntDisjointSets` in the [DataStructures.jl](https://github.com/JuliaCollections/DataStructures.jl) package.

Use this data structure to find the connected components of a graph, by making `src(e)` and `tgt(e)` be in the same equivalence class for each edge `e`.
:::

:::{.rmenv title="Exercise (Cospan composition, &starf; &starf; &starf;)"}
Implement composition of cospans using union-find.
:::

:::{.rmenv title="Exercise (Julia macros, &starf; &starf; &starf; &starf;)"}
[Macros](https://docs.julialang.org/en/v1/manual/metaprogramming/) in Julia, such as the `@relation` macro, are a useful tool for creating embedded domain-specific languages (DSLs) with special notation.

Write a macro that creates a graph using a Graphviz-like syntax:

```julia
g = @make_graph begin
  a
  b
  c
  a -> b
  b -> c
end
```

*Hint*: Use the `dump` function to see what a Julia expression looks like internally.
:::

## Part 3

:::{.rmenv title="Exercise (Your first discrete dynamical system (DDS), &starf;)"}

A discrete dynamical system (DDS) consists of a set $X$ of states and a function $\phi: X \rightarrow X$ defining the transition from one state to the next. Given this, the schema for a discrete dynamical system (DDS) has a single object object equipped with a single non-identity morphism. Implement this schema in Catlab. Then, instantiate an acset with data that represents the following DDS:

:::{#fig-dds}
<iframe class="quiver-embed" src="https://q.uiver.app/#q=WzAsNSxbMCwxLCJcXHRleHRjaXJjbGVkezF9Il0sWzEsMSwiXFx0ZXh0Y2lyY2xlZHsyfSJdLFsxLDAsIlxcdGV4dGNpcmNsZWR7M30iXSxbMCwwLCJcXHRleHRjaXJjbGVkezR9Il0sWzIsMSwiXFx0ZXh0Y2lyY2xlZHs1fSJdLFswLDJdLFsxLDJdLFsyLDNdLFszLDBdLFs0LDFdXQ==&embed" width="432" height="304" style="border-radius: 8px; border: none;"></iframe>

A simple discrete dynamical system.
:::

:::

:::{.rmenv title="Exercise (Lotka-Volterra with a twist, &starf; &starf;)"}
Suppose that there are populations of rocks, populations of papers, and populations of scissors. Predation happens to each based on the classic pattern; i.e. scissors eat papers, papers eat rocks, and rocks eat scissors.

Write down a model for a pairwise interaction between two implements based on Lotka-Volterra dynamics, and then compose three copies of that model to produce a three-population system.
:::

:::{.rmenv title="Exercise (Double nested undirected wiring diagram, &starf; &starf; &starf;)"}
Suppose that you have a *doubly nested* undirected wiring diagram of resource sharers. By this, I mean you have an undirected wiring diagram, where each box contains an undirected wiring diagram, and each box of this contains a resource sharer.

Then you can put together these resource sharers in two different ways. The first is by composing each of the inner undirected wiring diagrams, so that the outer wiring diagram now has a resource sharer in each box, and then composing the outer undirected wiring diagram. In other words, call `oapply` on each inner wiring diagram, and then call `oapply` on the other diagram.

The second way is to first collapse the nesting, by composing the two layers of wiring diagrams into one big wiring diagram, and then compose all of the resource sharers at one. In other words, call `ocompose` on the UWD of UWDs, and then call `oapply` on the remaining UWD with a resource sharer in each box.

Both methods of composition should ultimately result in the same composed resource sharer.

This is analogous to the law for a monad algebra:

<!-- https://q.uiver.app/#q=WzAsNCxbMCwwLCJUXjJBIl0sWzEsMCwiVCBBIl0sWzAsMSwiVCBBIl0sWzEsMSwiQSJdLFswLDEsIlxcbXVfQSJdLFsxLDMsImYiXSxbMiwzLCJmIiwyXSxbMCwyLCJUIGYiLDJdXQ== -->
<iframe class="quiver-embed" src="https://q.uiver.app/#q=WzAsNCxbMCwwLCJUXjJBIl0sWzEsMCwiVCBBIl0sWzAsMSwiVCBBIl0sWzEsMSwiQSJdLFswLDEsIlxcbXVfQSJdLFsxLDMsImYiXSxbMiwzLCJmIiwyXSxbMCwyLCJUIGYiLDJdXQ==&embed" width="304" height="304" style="border-radius: 8px; border: none;"></iframe>

Verify this rule by testing it out in code; construct a nested undirected wiring diagram, and then try out both ways of composing it.
:::

:::{.rmenv title="Exercise (Petri nets as dynamical systems, &starf; &starf; &starf; &starf;)"}
Any Petri net induces a dynamical system where the state space is $\mathbb{R}^S$ ($S$ is the set of species), and the vector field is given by [mass action semantics](https://arxiv.org/pdf/1209.3632.pdf) (see Chapter 2: The rate equation). In [AlgebraicPetri](https://github.com/AlgebraicJulia/AlgebraicPetri.jl), we have a function called [`vectorfield`](https://github.com/AlgebraicJulia/AlgebraicPetri.jl/blob/37247dd15bb1130275ff3b074aa2e19e1cdd38ee/src/AlgebraicPetri.jl#L283) which produces a function that computes the vector field for the mass action equations. Use this function (or for an extra challenge, reimplement this function) to turn an arbitrary Petri net into a resource sharer that exposes all of the populations of the species. Then pick a Petri net, turn it into a resource sharer, and compose it with another resource sharer of your choice.

Now think about the following question. You can compose Petri nets together by gluing their species together. If you compose Petri nets and then take the dynamical system given by mass action on the composed Petri net, is that the same dynamical system as turning each Petri net into a resource sharer and then composing the resource sharers? Prove or give a counterexample.
:::

:::{.rmenv title="Exercise (Nested acsets, &starf; &starf; &starf; &starf; &starf;)"}
Figure out a good mathematical abstraction for, and implement nested acsets in Julia.

For some thoughts on what this might mean, see:

- [Source code for Semagrams](https://github.com/AlgebraicJulia/Semagrams.jl/blob/main/scala/core/src/acsets/acsets.scala)
- [Some thoughts on nested wiring diagrams](https://www.localcharts.org/t/nested-wiring-diagrams-via-bicomodules/792)
- [My talk on Semagrams](https://owenlynch.org/static/2023-ACT-Semagrams/talk.html#/nested-wiring-diagrams-via-free-monads)
:::
